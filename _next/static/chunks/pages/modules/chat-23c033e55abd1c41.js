(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8907],{5231:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/modules/chat",function(){return s(4857)}])},4857:function(e,n,s){"use strict";s.r(n),s.d(n,{__toc:function(){return o}});var t=s(2676),i=s(57),a=s(8949);let o=[{depth:2,value:"Purpose and Functionality",id:"purpose-and-functionality"},{depth:2,value:"Technical Implementation",id:"technical-implementation"},{depth:3,value:"Example Flow: Sending an Annotated Message",id:"example-flow-sending-an-annotated-message"}];function r(e){let n=Object.assign({h1:"h1",p:"p",strong:"strong",h2:"h2",code:"code",ul:"ul",li:"li",h3:"h3",ol:"ol"},(0,a.a)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:"Module: Chat"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"The Chat module is Webizen's primary real-time communication component. It provides a secure, decentralized, and feature-rich messaging experience, integrating P2P protocols with native platform capabilities."})}),"\n",(0,t.jsx)(n.p,{children:"This module enables everything from simple one-on-one text chats to complex, annotated group conversations and even SMS/MMS integration on mobile devices."}),"\n",(0,t.jsx)(n.h2,{id:"purpose-and-functionality",children:"Purpose and Functionality"}),"\n",(0,t.jsxs)(n.p,{children:["The primary goal of the ",(0,t.jsx)(n.code,{children:"chat"})," module is to provide a unified communication interface that is private, censorship-resistant, and extensible."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Core Functions:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multi-Protocol Backend:"})," The module uses a hybrid approach for message transport, leveraging the best tool for each scenario:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GUN.eco:"})," For decentralized, real-time data synchronization in group chats."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"WebRTC:"})," For establishing direct, end-to-end encrypted data channels for one-on-one chats and file transfers."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"WebSockets:"})," As a reliable fallback for communication when a direct P2P connection cannot be established."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mobile Integration:"})," On the Mobile App, the chat module can be configured to act as the default SMS/MMS handler, allowing users to manage both decentralized Webizen messages and traditional cellular messages in one place."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Call Recording & Sharing:"})," Integrates with the device's calling features to record conversations (with consent) and securely share the recordings with other users via their ADP/WebID."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Context Markup Language (CML):"})," A key innovation where chat messages can be semantically annotated using CML. For example, a piece of text can be tagged as a ",(0,t.jsx)(n.code,{children:"cml:Question"})," or a ",(0,t.jsx)(n.code,{children:"cml:Task"}),". These annotations are discoverable, allowing a domain owner (e.g., a project manager) to query a chat history for all unresolved tasks."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Module Path"}),": ",(0,t.jsx)(n.code,{children:"src/modules/chat/index.js"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"UI Component"}),": The main chat interface is rendered by ",(0,t.jsx)(n.code,{children:"src/components/Chat.js"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Core Libraries"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GUN.eco"}),": For the real-time database backend."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"react-native-sms"}),", ",(0,t.jsx)(n.code,{children:"react-native-callkeep"}),": For native mobile integrations."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ontology"}),": ",(0,t.jsx)(n.code,{children:"ontologies/cml-v1.ttl"})," defines the vocabulary for Context Markup Language annotations."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dependencies"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"modules/adp"}),": For verifying the identity of chat participants."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"modules/addressbook"}),": To initiate chats with known contacts."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"services/p2p"}),": A wrapper service that manages the GUN, WebRTC, and WebSocket connections."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"services/crypto"}),": To handle the end-to-end encryption of messages. All messages are encrypted using a shared secret derived from the participants' keys."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-flow-sending-an-annotated-message",children:"Example Flow: Sending an Annotated Message"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["User Alice types a message in the ",(0,t.jsx)(n.code,{children:"Chat.js"}),' component: "Can someone please create a new logo for Project X?"']}),"\n",(0,t.jsxs)(n.li,{children:['She highlights "create a new logo for Project X" and uses a UI element to tag it as a ',(0,t.jsx)(n.code,{children:"cml:Task"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The UI component dispatches an event: ",(0,t.jsx)(n.code,{children:"eventBus.emit('chat:send_message', { recipient: '...', content: '...', annotations: [...] })"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"chat"})," module's ",(0,t.jsx)(n.code,{children:"handleEvent"})," function receives the request."]}),"\n",(0,t.jsx)(n.li,{children:"It encrypts the message content and annotations for the recipient."}),"\n",(0,t.jsx)(n.li,{children:"It determines the best transport protocol (e.g., GUN.eco for a group chat) and sends the encrypted payload."}),"\n",(0,t.jsxs)(n.li,{children:['Later, the manager of "Project X" can perform a semantic query across all project-related chats for any messages containing an uncompleted ',(0,t.jsx)(n.code,{children:"cml:Task"}),", allowing them to discover action items without manually reading every message."]}),"\n"]})]})}n.default=(0,i.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.a)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)},pageOpts:{filePath:"pages/modules/chat.mdx",route:"/modules/chat",timestamp:1752449798e3,title:"Module: Chat",headings:o},pageNextRoute:"/modules/chat"})}},function(e){e.O(0,[57,2888,9774,179],function(){return e(e.s=5231)}),_N_E=e.O()}]);