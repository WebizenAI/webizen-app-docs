(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2492],{2714:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/modules/backups",function(){return s(1623)}])},1623:function(e,n,s){"use strict";s.r(n),s.d(n,{__toc:function(){return c}});var i=s(2676),t=s(57),r=s(8949);let c=[{depth:2,value:"Purpose and Functionality",id:"purpose-and-functionality"},{depth:2,value:"Technical Implementation",id:"technical-implementation"},{depth:3,value:"Example Flow: Creating a Manual Backup to IPFS",id:"example-flow-creating-a-manual-backup-to-ipfs"}];function o(e){let n=Object.assign({h1:"h1",p:"p",strong:"strong",h2:"h2",code:"code",ul:"ul",li:"li",h3:"h3",ol:"ol"},(0,r.a)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"Module: Secure Backups"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"The Backups module provides a robust and secure system for creating, managing, and restoring backups of the user's entire Webizen data set. It ensures data durability and provides a crucial recovery path in case of device failure or data corruption."})}),"\n",(0,i.jsx)(n.p,{children:"This module integrates strong encryption and post-quantum signatures with flexible storage options to give users full control over their data resilience strategy."}),"\n",(0,i.jsx)(n.h2,{id:"purpose-and-functionality",children:"Purpose and Functionality"}),"\n",(0,i.jsxs)(n.p,{children:["The primary goal of the ",(0,i.jsx)(n.code,{children:"backups"})," module is to give users peace of mind by allowing them to create secure, portable, and verifiable copies of their personal data pod."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Core Functions:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comprehensive Archiving:"})," The module can package the user's entire local Quadstore and the contents of their Solid Pod into a single, compressed archive file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strong Encryption:"})," Before storage, every backup archive is encrypted with ",(0,i.jsx)(n.strong,{children:"AES"}),", using a key derived from the user's master password. This ensures that the backup content is unreadable to anyone without the user's credentials."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Post-Quantum Integrity:"})," After encryption, the backup file is signed using ",(0,i.jsx)(n.strong,{children:"SPHINCS+"}),". This signature guarantees that the backup has not been tampered with and confirms its authenticity upon restoration."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-Destination Support:"})," Users can choose to store their encrypted and signed backups in multiple locations for redundancy:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"IPFS:"})," For decentralized, resilient P2P storage."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Google Drive:"})," For convenient cloud storage (requires user authentication)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Local File System:"})," For offline backups to an external hard drive or other local storage."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Remote Solid Pod:"})," For syncing to another trusted Pod provider."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scheduled Backups:"})," Integrates with the ",(0,i.jsx)(n.code,{children:"jobs"})," module to allow users to schedule automatic, recurring backups."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Module Path"}),": ",(0,i.jsx)(n.code,{children:"src/modules/backups/index.js"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UI Component"}),": The interface for creating, managing, and restoring backups is rendered by ",(0,i.jsx)(n.code,{children:"src/components/Backups.js"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Core Libraries"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"googleapis"}),": For authenticating with and uploading to Google Drive."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"archiver"}),": A Node.js library for creating compressed archives."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ontology"}),": ",(0,i.jsx)(n.code,{children:"ontologies/timeline-v1.ttl"})," is used to create a timeline of backup events, providing a clear history of when backups were made."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dependencies"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"services/crypto"}),": Essential for both the AES encryption of the backup content and the SPHINCS+ signing of the final archive."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"services/quadstore"})," & ",(0,i.jsx)(n.code,{children:"services/solidos"}),": To read the data that needs to be backed up."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"services/ipfs"}),": To upload the final backup file to the IPFS network."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"modules/jobs"}),": For scheduling automatic backups."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-flow-creating-a-manual-backup-to-ipfs",children:"Example Flow: Creating a Manual Backup to IPFS"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["A user navigates to the ",(0,i.jsx)(n.code,{children:"Backups.js"}),' component and clicks "Create New Backup."']}),"\n",(0,i.jsx)(n.li,{children:'They select "IPFS" as the destination.'}),"\n",(0,i.jsxs)(n.li,{children:["The UI dispatches an event: ",(0,i.jsx)(n.code,{children:"eventBus.emit('backups:create', { destination: 'ipfs' })"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"backups"})," module's ",(0,i.jsx)(n.code,{children:"handleEvent"})," function receives the request."]}),"\n",(0,i.jsxs)(n.li,{children:["It reads the entire content of the user's Quadstore and Solid Pod and uses the ",(0,i.jsx)(n.code,{children:"archiver"})," library to create a single compressed file (e.g., ",(0,i.jsx)(n.code,{children:"backup.zip"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["It calls the ",(0,i.jsx)(n.code,{children:"crypto"})," service to encrypt the ",(0,i.jsx)(n.code,{children:"backup.zip"})," file with AES, creating ",(0,i.jsx)(n.code,{children:"backup.zip.enc"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["It then calls the ",(0,i.jsx)(n.code,{children:"crypto"})," service again to sign the encrypted file (",(0,i.jsx)(n.code,{children:"backup.zip.enc"}),") with SPHINCS+, creating a ",(0,i.jsx)(n.code,{children:"signature.json"})," object."]}),"\n",(0,i.jsxs)(n.li,{children:["The module uploads both ",(0,i.jsx)(n.code,{children:"backup.zip.enc"})," and ",(0,i.jsx)(n.code,{children:"signature.json"})," to IPFS via the ",(0,i.jsx)(n.code,{children:"ipfs"})," service, getting back two CIDs."]}),"\n",(0,i.jsxs)(n.li,{children:["Finally, it creates a new RDF resource using the ",(0,i.jsx)(n.code,{children:"timeline-v1.ttl"})," ontology to log the backup event, storing the CIDs and timestamp in the user's Solid Pod. The user can now see this new backup in their history and can share its CID securely."]}),"\n"]})]})}n.default=(0,t.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.a)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)},pageOpts:{filePath:"pages/modules/backups.mdx",route:"/modules/backups",timestamp:1752449798e3,title:"Module: Secure Backups",headings:c},pageNextRoute:"/modules/backups"})}},function(e){e.O(0,[57,2888,9774,179],function(){return e(e.s=2714)}),_N_E=e.O()}]);