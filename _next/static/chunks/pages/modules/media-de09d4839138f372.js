(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2627],{4789:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/modules/media",function(){return i(9754)}])},9754:function(e,n,i){"use strict";i.r(n),i.d(n,{__toc:function(){return o}});var s=i(2676),t=i(57),r=i(8949);let o=[{depth:2,value:"Purpose and Functionality",id:"purpose-and-functionality"},{depth:2,value:"Technical Implementation",id:"technical-implementation"},{depth:3,value:"Example Flow: Sharing and Accessing a Paid Video",id:"example-flow-sharing-and-accessing-a-paid-video"}];function c(e){let n=Object.assign({h1:"h1",p:"p",strong:"strong",h2:"h2",code:"code",ul:"ul",li:"li",h3:"h3",ol:"ol",em:"em"},(0,r.a)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{children:"Module: Media Sharing"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"The Media Sharing module provides the functionality for sharing large files, such as videos and PDFs, directly between peers using the WebTorrent protocol. It also integrates with Webizen's rights and payment systems to enable creators to charge for access to their content."})}),"\n",(0,s.jsx)(n.p,{children:"This module is a core component for building a decentralized content distribution and monetization ecosystem."}),"\n",(0,s.jsx)(n.h2,{id:"purpose-and-functionality",children:"Purpose and Functionality"}),"\n",(0,s.jsxs)(n.p,{children:["The primary goal of the ",(0,s.jsx)(n.code,{children:"media"})," module is to provide a robust and efficient mechanism for P2P file sharing, bypassing the need for expensive, centralized hosting providers."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Core Functions:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"WebTorrent Integration:"})," It uses the ",(0,s.jsx)(n.code,{children:"webtorrent"})," service to create, seed, and download files. When a user shares a file, the module generates a ",(0,s.jsx)(n.code,{children:"magnet:"})," link that can be shared with others."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Paid Access Control:"})," This is a key feature for content creators. The module can enforce paid access to a file. It does this by encrypting the file content and only releasing the decryption key after verifying an eCash payment."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ODRL Policy Enforcement:"})," The terms of access (e.g., the price, the currency) are defined in a machine-readable ",(0,s.jsx)(n.strong,{children:"ODRL"})," policy that is shared alongside the media file. The module parses this policy to determine the access requirements."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ECDSA for Verification:"})," eCash payment verification is handled by the ",(0,s.jsx)(n.code,{children:"cashtab"})," module, which uses ECDSA signatures to interact with the blockchain."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Module Path"}),": ",(0,s.jsx)(n.code,{children:"src/modules/media/index.js"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"UI Component"}),": The interface for uploading, sharing, and viewing media is handled by ",(0,s.jsx)(n.code,{children:"src/components/Media.js"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Core Libraries"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"webtorrent"}),": For all P2P file transfer operations."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CryptoJS"}),": Used for the AES encryption of the media file content."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dependencies"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"modules/cashtab"}),": To verify eCash payments for paid content."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"modules/agreements"}),": The ODRL policies are a form of agreement that this module enforces."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"services/webtorrent"}),": The service that manages the core WebTorrent client."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"services/crypto"}),": For encrypting the file content and handling any signatures related to the ODRL policy."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-flow-sharing-and-accessing-a-paid-video",children:"Example Flow: Sharing and Accessing a Paid Video"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Creator (Alice) Shares a Video:"}),"\na. Alice selects a video file (",(0,s.jsx)(n.code,{children:"my-film.mp4"}),") in the ",(0,s.jsx)(n.code,{children:"Media.js"})," UI.\nb. She specifies a price of 20,000 XEC in an ODRL policy.\nc. The ",(0,s.jsx)(n.code,{children:"media"})," module encrypts ",(0,s.jsx)(n.code,{children:"my-film.mp4"})," with a new AES key.\nd. It creates a torrent for the ",(0,s.jsx)(n.em,{children:"encrypted"})," file and generates a ",(0,s.jsx)(n.code,{children:"magnet:"})," link.\ne. It stores the AES decryption key, the ODRL policy, and the magnet link in a new RDF resource in her Solid Pod, making it discoverable."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Consumer (Bob) Accesses the Video:"}),"\na. Bob discovers the magnet link for Alice's film. He starts downloading the encrypted file via WebTorrent.\nb. His client also fetches the ODRL policy, which states that the ",(0,s.jsx)(n.code,{children:"play"}),' action requires a 20,000 XEC payment.\nc. Bob\'s UI displays a "Pay 20,000 XEC to Watch" button. He clicks it.\nd. The ',(0,s.jsx)(n.code,{children:"cashtab"})," module facilitates the payment to Alice's eCash address.\ne. Once the transaction is confirmed on the blockchain, Bob's client sends a notification (with the transaction ID) to Alice's client.\nf. Alice's client verifies the payment. Upon success, it securely sends the AES decryption key for the video file to Bob's client.\ng. Bob's ",(0,s.jsx)(n.code,{children:"media"})," module can now decrypt the file as it downloads, allowing him to stream the video."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This workflow enables true peer-to-peer content monetization, where the creator maintains control and receives payment directly from the consumer, without any intermediary platform taking a cut."})]})}n.default=(0,t.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.a)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)},pageOpts:{filePath:"pages/modules/media.mdx",route:"/modules/media",timestamp:1752449798e3,title:"Module: Media Sharing",headings:o},pageNextRoute:"/modules/media"})}},function(e){e.O(0,[57,2888,9774,179],function(){return e(e.s=4789)}),_N_E=e.O()}]);