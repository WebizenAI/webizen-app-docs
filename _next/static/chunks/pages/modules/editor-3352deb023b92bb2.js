(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4372],{316:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/modules/editor",function(){return i(400)}])},400:function(e,n,i){"use strict";i.r(n),i.d(n,{__toc:function(){return d}});var t=i(2676),o=i(57),s=i(8949),r=i(7024);let d=[{depth:2,value:"Purpose and Functionality",id:"purpose-and-functionality"},{depth:2,value:"Technical Implementation",id:"technical-implementation"},{depth:3,value:"Example Flow: Collaborative Editing Session",id:"example-flow-collaborative-editing-session"}];function l(e){let n=Object.assign({h1:"h1",p:"p",strong:"strong",h2:"h2",code:"code",ul:"ul",li:"li",h3:"h3",ol:"ol"},(0,s.a)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:"Module: Editor"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"The Editor module provides a powerful, full-featured code and text editing experience directly within the Webizen Desktop Application. It is designed to be a VSCode-like environment, integrating version control, real-time collaboration, and decentralized storage."})}),"\n",(0,t.jsx)(n.p,{children:"This module empowers developers to write code, documentation, and notes without leaving the Webizen ecosystem."}),"\n",(0,t.jsx)(n.h2,{id:"purpose-and-functionality",children:"Purpose and Functionality"}),"\n",(0,t.jsxs)(n.p,{children:["The primary goal of the ",(0,t.jsx)(n.code,{children:"editor"})," module is to provide a first-class development and writing environment that is deeply integrated with Webizen's core principles of decentralization and collaboration."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Core Functions:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rich Text and Code Editing:"})," Built on the ",(0,t.jsx)(n.strong,{children:"Monaco Editor"}),", the same editor that powers Visual Studio Code, it provides features like syntax highlighting for dozens of languages, IntelliSense, and advanced editing commands."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Real-time Collaborative Editing:"})," Multiple users can edit the same document simultaneously. Changes are synchronized in real-time between peers using the ",(0,t.jsx)(n.strong,{children:"GUN.eco"})," decentralized database."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Git Integration:"})," The editor is integrated with the ",(0,t.jsx)(n.code,{children:"gitmark"})," module, allowing developers to perform common git operations like staging, committing, and pushing changes directly from the editor interface."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Decentralized Storage:"})," Files are saved to the user's ",(0,t.jsx)(n.strong,{children:"Solid Pod"})," via the ",(0,t.jsx)(n.code,{children:"solidos"})," service, ensuring that the user always owns and controls their work."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Browser Diagnostics:"})," Provides tools for inspecting and diagnosing web applications running within the Webizen environment."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"technical-implementation",children:"Technical Implementation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Module Path"}),": ",(0,t.jsx)(n.code,{children:"src/modules/editor/index.js"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"UI Component"}),": The main editor interface is rendered by ",(0,t.jsx)(n.code,{children:"src/components/Editor.js"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Core Libraries"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"monaco-editor"}),": For the core text editor component."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"gun"}),": For the real-time collaborative editing backend."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ontology"}),": ",(0,t.jsx)(n.code,{children:"ontologies/editor-v1.ttl"})," defines the schema for editor-related metadata, such as multilingual comments or collaborative session information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dependencies"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"modules/gitmark"}),": For all version control functionality."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"modules/settings"}),": To load user preferences for the editor (e.g., themes, font sizes)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"services/solidos"}),": To read and write files from the user's Solid Pod."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"services/p2p"})," (which manages GUN): For establishing the real-time data synchronization channels."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-flow-collaborative-editing-session",children:"Example Flow: Collaborative Editing Session"}),"\n",(0,t.jsx)(n.p,{children:"This diagram illustrates how two users, Alice and Bob, can edit the same document in real time."}),"\n",(0,t.jsx)(r.G$,{chart:"\nsequenceDiagram\n    participant Alice's Editor\n    participant Alice's GUN Node\n    participant Bob's GUN Node\n    participant Bob's Editor\n\n    Alice's Editor->>Alice's GUN Node: User types 'A' - Send update to GUN graph\n    Alice's GUN Node-->>Bob's GUN Node: Propagate change over P2P network\n    Bob's GUN Node-->>Bob's Editor: Receive update event\n    Bob's Editor->>Bob's Editor: Apply 'A' to document\n\n    Bob's Editor->>Bob's GUN Node: User types 'B' - Send update to GUN graph\n    Bob's GUN Node-->>Alice's GUN Node: Propagate change over P2P network\n    Alice's GUN Node-->>Alice's Editor: Receive update event\n    Alice's Editor->>Alice's Editor: Apply 'B' to document\n"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Initialization"}),": Alice opens a file from her Solid Pod. The ",(0,t.jsx)(n.code,{children:"editor"})," module loads the content and subscribes to a specific graph node in GUN that represents the document. Bob does the same."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Alice Makes an Edit"}),": Alice types a character. The ",(0,t.jsx)(n.code,{children:"Editor.js"}),' component captures this change and sends the update (a "diff") to the local ',(0,t.jsx)(n.code,{children:"editor"})," module."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GUN Propagation"}),": The ",(0,t.jsx)(n.code,{children:"editor"})," module puts the change into the GUN database. GUN's P2P protocol automatically propagates this change to all subscribed peers, including Bob."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bob Receives the Edit"}),": Bob's ",(0,t.jsx)(n.code,{children:"editor"})," module receives the update from his GUN node and applies the change to his instance of the Monaco Editor, keeping the documents in sync."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This entire process happens in milliseconds and without a central server, providing a truly decentralized and collaborative editing experience."})]})}n.default=(0,o.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.a)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)},pageOpts:{filePath:"pages/modules/editor.mdx",route:"/modules/editor",timestamp:1752449798e3,title:"Module: Editor",headings:d},pageNextRoute:"/modules/editor"})}},function(e){e.O(0,[57,2888,9774,179],function(){return e(e.s=316)}),_N_E=e.O()}]);