(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1681],{327:function(e,s,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/api-reference/solidod-service",function(){return r(1715)}])},1715:function(e,s,r){"use strict";r.r(s),r.d(s,{__toc:function(){return l}});var i=r(2676),n=r(57),t=r(8949);let l=[{depth:2,value:"Core Design Principles",id:"core-design-principles"},{depth:2,value:"Key Functions for RDF Data",id:"key-functions-for-rdf-data"},{depth:3,value:"getDataset(resourceUrl)",id:"getdatasetresourceurl"},{depth:3,value:"saveDatasetAt(resourceUrl, dataset)",id:"savedatasetatresourceurl-dataset"},{depth:3,value:"deleteResource(resourceUrl)",id:"deleteresourceresourceurl"},{depth:2,value:"Key Functions for Containers and Files",id:"key-functions-for-containers-and-files"},{depth:3,value:"getContainedResourceUrls(containerUrl)",id:"getcontainedresourceurlscontainerurl"},{depth:3,value:"getFile(fileUrl)",id:"getfilefileurl"},{depth:3,value:"overwriteFile(fileUrl, fileBlob)",id:"overwritefilefileurl-fileblob"}];function o(e){let s=Object.assign({h1:"h1",p:"p",code:"code",strong:"strong",a:"a",h2:"h2",ul:"ul",li:"li",hr:"hr",h3:"h3"},(0,t.a)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{children:"SolidOS Service API Reference"}),"\n",(0,i.jsxs)(s.p,{children:["The SolidOS Service (",(0,i.jsx)(s.code,{children:"services/solidos.js"}),") provides a high-level interface for interacting with a user's Solid Pod. As the user's Pod is their authoritative source of truth, this service is fundamental for any module that needs to persist data in a sovereign and interoperable manner."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Note:"})," This service runs exclusively in the privileged ",(0,i.jsx)(s.strong,{children:"background process"}),". Modules do not interact with it directly but make requests through the secure ",(0,i.jsx)(s.a,{href:"./webizen-api",children:"Webizen Core API"}),", which then calls this service's functions."]}),"\n",(0,i.jsx)(s.h2,{id:"core-design-principles",children:"Core Design Principles"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Abstraction:"})," The service provides a simplified API over the powerful but complex ",(0,i.jsx)(s.code,{children:"@inrupt/solid-client"})," libraries. This makes common operations like fetching and saving RDF data much more straightforward for module developers."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Authentication Aware:"})," The service automatically handles the authenticated session with the user's Solid Pod. All requests made through this service are authenticated using the user's WebID credentials."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Resource-Oriented:"}),' The API is designed around the concept of "Resources" in Solid, which can be either RDF documents (Datasets) or binary files.']}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"key-functions-for-rdf-data",children:"Key Functions for RDF Data"}),"\n",(0,i.jsx)(s.p,{children:"These functions are used for creating, reading, updating, and deleting structured RDF data (e.g., profiles, contacts, agreements)."}),"\n",(0,i.jsx)(s.h3,{id:"getdatasetresourceurl",children:(0,i.jsx)(s.code,{children:"getDataset(resourceUrl)"})}),"\n",(0,i.jsx)(s.p,{children:'Fetches an RDF resource (a "Dataset") from a Solid Pod.'}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Description"}),": Retrieves the RDF triples contained within a specific resource URL."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"resourceUrl"})," (string): The full URL of the RDF resource to fetch (e.g., ",(0,i.jsx)(s.code,{children:"https://alice.pod.example/profile/card"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": ",(0,i.jsx)(s.code,{children:"Promise<Dataset>"})," - A Solid-Client ",(0,i.jsx)(s.a,{href:"https://docs.inrupt.com/developer-tools/javascript/client-libraries/reference/glossary/#term-SolidDataset",children:"Dataset"})," object, which is a collection of RDF Quads."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"savedatasetatresourceurl-dataset",children:(0,i.jsx)(s.code,{children:"saveDatasetAt(resourceUrl, dataset)"})}),"\n",(0,i.jsx)(s.p,{children:"Saves or overwrites an RDF resource in a Solid Pod."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Description"}),": Writes a Dataset to the specified URL. If the resource already exists, it will be overwritten. If it does not exist, it will be created."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"resourceUrl"})," (string): The full URL where the resource should be saved."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"dataset"})," (Dataset): The Solid-Client Dataset object to save."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": ",(0,i.jsx)(s.code,{children:"Promise<Dataset>"})," - The saved Dataset object as confirmed by the Pod."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"deleteresourceresourceurl",children:(0,i.jsx)(s.code,{children:"deleteResource(resourceUrl)"})}),"\n",(0,i.jsx)(s.p,{children:"Deletes a resource (either an RDF file or a binary file) from a Solid Pod."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Description"}),": Permanently removes the specified resource."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"resourceUrl"})," (string): The URL of the resource to delete."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": ",(0,i.jsx)(s.code,{children:"Promise<void>"})]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"key-functions-for-containers-and-files",children:"Key Functions for Containers and Files"}),"\n",(0,i.jsx)(s.p,{children:"These functions are used for managing collections of resources (Containers) and non-RDF files."}),"\n",(0,i.jsx)(s.h3,{id:"getcontainedresourceurlscontainerurl",children:(0,i.jsx)(s.code,{children:"getContainedResourceUrls(containerUrl)"})}),"\n",(0,i.jsx)(s.p,{children:"Lists the URLs of all resources within a Solid Container."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Description"}),": Fetches the contents of a directory-like Container in a Solid Pod."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"containerUrl"})," (string): The URL of the Container (must end with a ",(0,i.jsx)(s.code,{children:"/"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": ",(0,i.jsx)(s.code,{children:"Promise<string[]>"})," - An array of URLs for all files and sub-containers within the specified container."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"getfilefileurl",children:(0,i.jsx)(s.code,{children:"getFile(fileUrl)"})}),"\n",(0,i.jsx)(s.p,{children:"Fetches a non-RDF, binary file from a Solid Pod."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Description"}),": Retrieves any kind of file, such as an image, video, or PDF."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"fileUrl"})," (string): The URL of the file to fetch."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": ",(0,i.jsx)(s.code,{children:"Promise<Blob>"})," - A Blob object containing the file's binary data and content type."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"overwritefilefileurl-fileblob",children:(0,i.jsx)(s.code,{children:"overwriteFile(fileUrl, fileBlob)"})}),"\n",(0,i.jsx)(s.p,{children:"Uploads or overwrites a binary file in a Solid Pod."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Description"}),": Writes a file to the specified URL. This is used for storing assets like profile pictures or attachments."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"fileUrl"})," (string): The full URL where the file should be saved."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"fileBlob"})," (Blob): The file content as a Blob object."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": ",(0,i.jsx)(s.code,{children:"Promise<void>"})]}),"\n"]})]})}s.default=(0,n.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,t.a)(),e.components);return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)},pageOpts:{filePath:"pages/api-reference/solidod-service.mdx",route:"/api-reference/solidod-service",timestamp:1752449798e3,title:"SolidOS Service API Reference",headings:l},pageNextRoute:"/api-reference/solidod-service"})}},function(e){e.O(0,[57,2888,9774,179],function(){return e(e.s=327)}),_N_E=e.O()}]);