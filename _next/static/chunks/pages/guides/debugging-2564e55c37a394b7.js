(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7131],{5685:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/debugging",function(){return i(5388)}])},5388:function(e,n,i){"use strict";i.r(n),i.d(n,{__toc:function(){return r}});var s=i(2676),o=i(57),t=i(8949);let r=[{depth:2,value:"The Two Main Processes",id:"the-two-main-processes"},{depth:3,value:"Debugging the Foreground (UI) Process",id:"debugging-the-foreground-ui-process"},{depth:3,value:"Debugging the Background Process",id:"debugging-the-background-process"},{depth:2,value:"Debugging Userland Applications",id:"debugging-userland-applications"},{depth:2,value:"Debugging the Web Extension",id:"debugging-the-web-extension"}];function c(e){let n=Object.assign({h1:"h1",p:"p",h2:"h2",ol:"ol",li:"li",strong:"strong",code:"code",h3:"h3",ul:"ul",em:"em"},(0,t.a)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{children:"Guide: Debugging in Webizen"}),"\n",(0,s.jsx)(n.p,{children:"Developing for a multi-process application like Webizen can be complex. This guide provides practical steps for debugging the different parts of the Webizen Desktop Application, including the main UI, the background process, and individual application views."}),"\n",(0,s.jsx)(n.h2,{id:"the-two-main-processes",children:"The Two Main Processes"}),"\n",(0,s.jsx)(n.p,{children:"The Webizen Electron application is split into two primary processes, and you'll need to debug them separately:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["The Foreground Process (",(0,s.jsx)(n.code,{children:"fg"}),"):"]})," This is the main window you see and interact with. It's responsible for rendering the entire user interface."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["The Background Process (",(0,s.jsx)(n.code,{children:"bg"}),"):"]})," This is a headless Node.js process that runs all the core logic, P2P networking, and the local server. You do not see it, but it's the engine of the application."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debugging-the-foreground-ui-process",children:"Debugging the Foreground (UI) Process"}),"\n",(0,s.jsx)(n.p,{children:"Debugging the foreground process is just like debugging any other web page."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"With the Webizen application running, you can open the Chromium Developer Tools."}),"\n",(0,s.jsxs)(n.li,{children:["Go to the menu ",(0,s.jsx)(n.code,{children:"View"})," -> ",(0,s.jsx)(n.code,{children:"Toggle Developer Tools"})," or use the keyboard shortcut:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"macOS"}),": ",(0,s.jsx)(n.code,{children:"Cmd + Option + I"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Windows/Linux"}),": ",(0,s.jsx)(n.code,{children:"Ctrl + Shift + I"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This will open a familiar DevTools window docked to the main application window. You can use the ",(0,s.jsx)(n.strong,{children:"Console"})," to see UI-related logs, the ",(0,s.jsx)(n.strong,{children:"Elements"})," tab to inspect the React component tree, and the ",(0,s.jsx)(n.strong,{children:"Sources"})," tab to set breakpoints in the UI-level code."]}),"\n",(0,s.jsx)(n.h3,{id:"debugging-the-background-process",children:"Debugging the Background Process"}),"\n",(0,s.jsx)(n.p,{children:"Since the background process has no visible window, you cannot open its DevTools directly. You must connect to it remotely."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"With the Webizen application running, open a standard Chrome or Brave browser."}),"\n",(0,s.jsxs)(n.li,{children:["Navigate to the following URL: ",(0,s.jsx)(n.code,{children:"chrome://inspect"})]}),"\n",(0,s.jsxs)(n.li,{children:["Click on the ",(0,s.jsx)(n.strong,{children:'"Configure..."'}),' button next to the "Discover network targets" checkbox.']}),"\n",(0,s.jsxs)(n.li,{children:["Add ",(0,s.jsx)(n.code,{children:"localhost:9222"})," to the list of targets and click ",(0,s.jsx)(n.strong,{children:'"Done"'}),". (The port may vary; check the project's Electron setup if this doesn't work)."]}),"\n",(0,s.jsxs)(n.li,{children:['You should now see a "Target" listed for the Webizen background process. Click the ',(0,s.jsx)(n.strong,{children:'"inspect"'})," link below it."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This will open a dedicated DevTools window for the background process. Here you can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["View all logs from the core services (",(0,s.jsx)(n.code,{children:"services/crypto.js"}),", ",(0,s.jsx)(n.code,{children:"services/ipfs.js"}),", etc.) in the ",(0,s.jsx)(n.strong,{children:"Console"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Set breakpoints in the background Node.js code via the ",(0,s.jsx)(n.strong,{children:"Sources"})," tab."]}),"\n",(0,s.jsxs)(n.li,{children:["Monitor network requests made by the background process in the ",(0,s.jsx)(n.strong,{children:"Network"})," tab."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"This is the most important debugging tool for understanding the core logic of Webizen."})}),"\n",(0,s.jsx)(n.h2,{id:"debugging-userland-applications",children:"Debugging Userland Applications"}),"\n",(0,s.jsxs)(n.p,{children:["Local apps running inside a ",(0,s.jsx)(n.code,{children:"<webview>"})," tag also have their own, separate process. To debug them:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Open the Developer Tools for the ",(0,s.jsx)(n.strong,{children:"Foreground Process"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["In the ",(0,s.jsx)(n.strong,{children:"Elements"})," tab, find the ",(0,s.jsx)(n.code,{children:"<webview>"})," element corresponding to the app you want to debug."]}),"\n",(0,s.jsxs)(n.li,{children:["Right-click on the element and select ",(0,s.jsx)(n.strong,{children:'"Inspect Element"'})," or a similar option that allows you to open the webview's own DevTools."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This will open a ",(0,s.jsx)(n.em,{children:"third"})," DevTools window, scoped specifically to that sandboxed application."]}),"\n",(0,s.jsx)(n.h2,{id:"debugging-the-web-extension",children:"Debugging the Web Extension"}),"\n",(0,s.jsx)(n.p,{children:"To debug the Web Extension version of Webizen:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Go to your browser's extension management page (",(0,s.jsx)(n.code,{children:"chrome://extensions"})," or ",(0,s.jsx)(n.code,{children:"about:addons"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"Find the Webizen extension."}),"\n",(0,s.jsx)(n.li,{children:'For a popup\'s UI, you can right-click on the popup and select "Inspect".'}),"\n",(0,s.jsx)(n.li,{children:"For the extension's background script, there will be a link on the extension management page to inspect its background view."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"By understanding which process you need to inspect, you can effectively debug any part of the Webizen ecosystem."})]})}n.default=(0,o.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.a)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)},pageOpts:{filePath:"pages/guides/debugging.mdx",route:"/guides/debugging",timestamp:1752449798e3,title:"Guide: Debugging in Webizen",headings:r},pageNextRoute:"/guides/debugging"})}},function(e){e.O(0,[57,2888,9774,179],function(){return e(e.s=5685)}),_N_E=e.O()}]);